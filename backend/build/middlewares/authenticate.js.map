{"version":3,"sources":["../../src/middlewares/authenticate.js"],"names":["Authenticate","req","res","next","authorization","headers","token","split","status","json","error","decoded","userId","user"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;IACqBA,Y;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;;wGACE,iBAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuBC,gBAAAA,aAFvB,GAE2CH,GAF3C,CAEYI,OAFZ,CAEuBD,aAFvB;AAGUE,gBAAAA,KAHV,GAGkBF,aAAa,CAACG,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAHlB;;AAAA,sBAIQ,CAACD,KAAD,IAAUA,KAAK,KAAK,EAJ5B;AAAA;AAAA;AAAA;;AAAA,iDAKaJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,kBAAAA,MAAM,EAAE,KAAV;AAAiBE,kBAAAA,KAAK,EAAE;AAAxB,iBAArB,CALb;;AAAA;AAAA;AAAA,uBAO0B,wBAAYJ,KAAZ,CAP1B;;AAAA;AAOUK,gBAAAA,OAPV;;AAAA,oBAQUA,OAAO,IAAIA,OAAO,CAACC,MAR7B;AAAA;AAAA;AAAA;;AAAA,iDASaV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,kBAAAA,MAAM,EAAE,KAAV;AAAiBE,kBAAAA,KAAK,EAAE;AAAxB,iBAArB,CATb;;AAAA;AAWIT,gBAAAA,GAAG,CAACY,IAAJ,GAAWF,OAAX;AAXJ,iDAYWR,IAAI,EAZf;;AAAA;AAAA;AAAA;AAAA,iDAcWD,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,kBAAAA,MAAM,EAAE,KAAV;AAAiBE,kBAAAA,KAAK,EAAE;AAAxB,iBAArB,CAdX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import { verifyToken } from '../utils';\n\n/**\n * @class Authenticate\n * @description authenticate tokens and roles\n * @exports Authenticate\n */\nexport default class Authenticate {\n  /**\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {String} req.userId - The user id\n   */\n  static async verifyToken(req, res, next) {\n    try {\n      const { headers: { authorization } } = req;\n      const token = authorization.split(' ')[1];\n      if (!token || token === '') {\n        return res.status(401).json({ status: '401', error: 'Access denied.' });\n      }\n      const decoded = await verifyToken(token);\n      if (!(decoded && decoded.userId)) {\n        return res.status(401).json({ status: '401', error: 'Access denied. We could not verify user.' });\n      }\n      req.user = decoded;\n      return next();\n    } catch (error) {\n      return res.status(500).json({ status: '500', error: 'Server error.' });\n    }\n  }\n}\n"],"file":"authenticate.js"}