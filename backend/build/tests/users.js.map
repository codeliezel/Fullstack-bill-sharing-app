{"version":3,"sources":["../../src/tests/users.js"],"names":["expect","chai","use","chaiHttp","login","email","password","sinonChai","describe","it","done","request","app","post","send","firstName","lastName","faker","internet","end","err","res","status","to","be","equal","before","keepOpen","afterEach","sinon","restore","after","close","set","logError","logResponse","token","body","get","have","patch","amount","balance"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\nimport faker from 'faker';\nimport app from '../app';\n\nconst { expect } = chai;\nchai.use(chaiHttp);\n\nconst login = {\n  email: 'francis@gmail.com',\n  password: '12345',\n};\nchai.use(sinonChai);\n\ndescribe('Users test', () => {\n  it('it should return 201 when a user tries to sign up', (done) => {\n    chai\n      .request(app)\n      .post('/api/v1/auth/user')\n      .send({\n        firstName: 'Dele',\n        lastName: 'Adeola',\n        email: faker.internet.email(),\n        password: 'dele',\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(201);\n        done();\n      });\n  });\n  it('it should return 409 for duplicate email', (done) => {\n    chai\n      .request(app)\n      .post('/api/v1/auth/user')\n      .send({\n        firstName: 'Dele',\n        lastName: 'Adeola',\n        email: 'francis@gmail.com',\n        password: 'dele',\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(409);\n        done();\n      });\n  });\n  it('it should return 200 for user sign in', (done) => {\n    chai\n      .request(app)\n      .post('/api/v1/auth/signin')\n      .send({\n        email: 'francis@gmail.com',\n        password: '12345',\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(200);\n        done();\n      });\n  });\n  it('it should return 401 for wrong password', (done) => {\n    chai\n      .request(app)\n      .post('/api/v1/auth/signin')\n      .send({\n        email: 'francis@gmail.com',\n        password: '12345678',\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(401);\n        done();\n      });\n  });\n});\n\nlet request;\ndescribe('Test for users apis that requires token', () => {\n  before(async () => {\n    request = chai.request(app).keepOpen();\n  });\n  afterEach(() => sinon.restore());\n  after(() => request.close());\n  describe('Users test', () => {\n    it('should return 200 is user can view account', (done) => {\n      chai.request(app)\n        .post('/api/v1/auth/signin')\n        .set('Accept', 'application/json')\n        .send(login)\n        .end((logError, logResponse) => {\n          const token = `Bearer ${logResponse.body.token}`;\n          chai.request(app)\n            .get('/api/v1/account')\n            .set('Authorization', token)\n            .end((err, res) => {\n              expect(res.status).to.be.equal(200);\n              expect(res).to.have.status('200');\n              done();\n            });\n        });\n    });\n    it('should return 200 for user to update account', (done) => {\n      chai.request(app)\n        .post('/api/v1/auth/signin')\n        .set('Accept', 'application/json')\n        .send(login)\n        .end((logError, logResponse) => {\n          const token = `Bearer ${logResponse.body.token}`;\n          chai.request(app)\n            .patch('/api/v1/account')\n            .set('Authorization', token)\n            .send({\n              firstName: 'Frances',\n              lastName: 'Xavion',\n            })\n            .end((err, res) => {\n              expect(res.status).to.be.equal(200);\n              expect(res).to.have.status('200');\n              done();\n            });\n        });\n    });\n    it('should return 200 for user to add money to account', (done) => {\n      chai.request(app)\n        .post('/api/v1/auth/signin')\n        .set('Accept', 'application/json')\n        .send(login)\n        .end((logError, logResponse) => {\n          const token = `Bearer ${logResponse.body.token}`;\n          chai.request(app)\n            .patch('/api/v1/add-money')\n            .set('Authorization', token)\n            .send({\n              amount: 5000.00,\n              balance: 0,\n            })\n            .end((err, res) => {\n              expect(res.status).to.be.equal(200);\n              expect(res).to.have.status('200');\n              done();\n            });\n        });\n    });\n  });\n});\n"],"file":"users.js"}