{"version":3,"sources":["../../src/controllers/group.js"],"names":["require","Op","Groups","models","Users","Transactions","GroupsController","req","res","body","name","category","emails","description","goalBalance","userId","user","create","result","status","json","message","data","error","findAndCountAll","where","order","length","id","params","findByPk","email","query","contains","update","groupBalance","amount","balance","addToBalance","parseFloat","checkRemainingBalance","newBalance","findOne","destroy"],"mappings":"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","sourcesContent":["import models from '../models';\n\nconst { Op } = require('sequelize');\n\nconst { Groups, Users, Transactions } = models;\n\n/**\n * @class GroupsController\n * @description Controllers for Groups\n * @exports GroupsController\n */\nexport default class GroupsController {\n  /**\n   * @method createGroup\n   * @description Method for user create account\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async createGroup(req, res) {\n    const {\n      name, category, emails, description, goalBalance,\n    } = req.body;\n    const { userId } = req.user;\n    try {\n      const result = await Groups.create({\n        userId, name, category, emails, description, goalBalance,\n      });\n      return res.status(201).json({\n        status: 201,\n        message: 'Successful!',\n        data: result,\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method getAllGroups\n   * @description Method for user create groups\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async getAllGroups(req, res) {\n    try {\n      const data = await Groups.findAndCountAll({\n        where: { userId: req.user.userId },\n        order: [\n          ['createdAt', 'DESC'],\n        ],\n      });\n      if (data.length === 0) {\n        return res.status(404).json({ status: 404, error: 'It seems like no groups have been created.' });\n      }\n      return res.status(200).json({ status: 200, message: 'Successful!', data });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method getAGroup\n   * @description Method for user create a group\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async getAGroup(req, res) {\n    const { id } = req.params;\n    try {\n      const result = await Groups.findByPk(id);\n      if (!result) {\n        return res.status(404).json({ status: 404, error: 'Group not found!' });\n      }\n      return res.status(200).json({ status: 200, message: 'Successful!', data: result });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method getAGroupYouArePartOf\n   * @description Method for user get a part of group\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async getAGroupYouArePartOf(req, res) {\n    const {\n      email,\n    } = req.query;\n    try {\n      const result = await Groups.findAndCountAll({\n        where: {\n          emails: { [Op.contains]: [email] },\n        },\n      });\n      if (!result) {\n        return res.status(404).json({\n          status: 404,\n          message: 'It seems you are not part of any group!',\n        });\n      }\n      return res.status(200).json({ status: 200, message: 'Successful!', data: result });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method updateAGroup\n   * @description Method for user update a group\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async updateAGroup(req, res) {\n    const { id } = req.params;\n    const { userId } = req.user;\n    const {\n      name, category, emails, goalBalance,\n    } = req.body;\n    try {\n      const result = await Groups.findByPk(id);\n      if (!result) {\n        return res.status(404).json({ status: 404, error: 'Group not found!' });\n      }\n      if (result.userId !== userId) {\n        return res.status(401).json({ status: 401, error: 'Access denied' });\n      }\n      await Groups.update({\n        name, category, emails, goalBalance,\n      }, { where: { id } });\n      return res.status(200).json({\n        status: 200,\n        message: 'Successful!',\n        data: {\n          name, category, emails, goalBalance,\n        },\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method depositMoneyToGroup\n   * @description Method for user to deposit money to a group\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async depositMoneyToGroup(req, res) {\n    try {\n      const {\n        goalBalance, groupBalance, amount, balance,\n      } = req.body;\n      const { id } = req.params;\n      const { userId } = req.user;\n\n      // calculate the group's balance after depositing an amount\n      const addToBalance = parseFloat(groupBalance + amount);\n\n      // calculate the group's balance against the group's goal balance\n      const checkRemainingBalance = parseFloat(goalBalance - groupBalance);\n\n      // calculate the user's remaining money in his/her account after depositing money to a group\n      const newBalance = parseFloat(balance - amount);\n\n      // if the amount you want to depost exceeds your personal balance\n      if (parseFloat(amount > balance)) {\n        return res.status(400).json({ status: 400, error: 'Lol, you do not have enough money now.' });\n      }\n      // if the amount you want to add exceeds the amount goals\n      if (amount > goalBalance) {\n        return res.status(400).json({ status: 400, error: 'The amount you wish to add exceeds the group set amount.' });\n      }\n      // if a user is still trying to add money after the the amount goals is already met\n      if (goalBalance === groupBalance) {\n        return res.status(400).json({ status: 400, error: 'Nah! You can not add any more money.' });\n      }\n      // if an amount that is trying to be added exceeds remaining amount that should be added\n      if (amount > checkRemainingBalance) {\n        return res.status(400).json({ status: 400, error: 'Hey, stop trying to add more money than you should.' });\n      }\n      await Transactions.create({\n        userId, amount,\n      });\n      await Groups.update({ groupBalance: addToBalance }, { where: { id } });\n      await Users.update({ balance: newBalance }, { where: { id: userId } });\n      return res.status(200).json({ status: 200, message: 'Successful!' });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method deleteAGroup\n   * @description Method for user delete a group\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async deleteAGroup(req, res) {\n    const { id } = req.params;\n    const { userId } = req.user;\n    try {\n      const result = await Groups.findOne({ where: { id, userId } });\n      if (!result) {\n        return res.status(404).json({ status: 404, error: 'Group not found!' });\n      }\n      await Groups.destroy({ where: { id, userId } });\n      return res.status(204).json({ status: 204 });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n}\n"],"file":"group.js"}