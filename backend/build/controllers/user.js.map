{"version":3,"sources":["../../src/controllers/user.js"],"names":["Users","models","Transactions","hashPassword","Helper","UsersController","req","res","email","body","password","findOne","where","user","status","json","error","create","result","userId","id","token","message","data","comparePassword","isPasswordValid","firstName","lastName","balance","update","amount","addToBalance","parseFloat","newbalance","findAll","order"],"mappings":"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","sourcesContent":["import models from '../models';\nimport { generateToken } from '../utils/index';\nimport Helper from '../utils/bcrypt';\n\nconst { Users, Transactions } = models;\nconst { hashPassword } = Helper;\n\n/**\n * @class UserController\n * @description Controllers for Users\n * @exports UsersController\n */\nexport default class UsersController {\n  /**\n   * @method createUser\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async createUser(req, res) {\n    const {\n      email,\n    } = req.body;\n    try {\n      req.body.password = await hashPassword(req.body.password);\n      const user = await Users.findOne({ where: { email } });\n      if (user) {\n        return res.status(409)\n          .json({ status: 409, error: 'This email exists already.' });\n      }\n      const result = await Users.create(req.body);\n      const { id: userId } = result;\n      const token = await generateToken({ userId });\n      return res.status(201).json({\n        status: 201, message: 'Successful!', data: result, token,\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method signInUser\n   * @description Method for user sign in\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signInUser(req, res) {\n    const { email, password } = req.body;\n    try {\n      const user = await Users.findOne({ where: { email } });\n      if (!user) {\n        return res.status(401).json({ status: 401, error: 'Unauthorised email, sorry.' });\n      }\n      const isPasswordValid = await Helper.comparePassword(user.password, password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ status: 401, error: 'Unauthorised password, sorry.' });\n      }\n      const {\n        id: userId,\n      } = user;\n      const token = await generateToken({ userId });\n      return res.status(200).json({\n        status: 200,\n        userId,\n        token,\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method getAnAccount\n   * @description Method for user to get an account\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async getAnAccount(req, res) {\n    const { userId } = req.user;\n    try {\n      const result = await Users.findOne({ where: { id: userId } });\n      return res.status(200).json({ status: 200, message: 'Successful!', data: result });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method updateAnAccount\n   * @description Method for user to update an account\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async updateAnAccount(req, res) {\n    const { userId } = req.user;\n    const {\n      firstName, lastName, balance,\n    } = req.body;\n    try {\n      await Users.findOne({ where: { id: userId } });\n      await Users.update({\n        firstName, lastName, balance,\n      }, { where: { id: userId } });\n      return res.status(200).json({\n        status: 200,\n        message: 'Successful!',\n        data: {\n          firstName, lastName, balance,\n        },\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method addMoney\n   * @description Method for user to add money\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async addMoney(req, res) {\n    const { balance, amount } = req.body;\n    const { userId } = req.user;\n    const addToBalance = parseFloat(balance + amount);\n    try {\n      await Transactions.create({\n        userId, amount,\n      });\n      await Users.update({ balance: addToBalance }, { where: { id: userId } });\n      return res.status(200).json({\n        status: 200,\n        message: 'Successful!',\n        data: { newbalance: addToBalance },\n      });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n\n  /**\n   * @method getHistory\n   * @description Method for user to get transaction logs\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} Returns body object\n   */\n  static async getHistory(req, res) {\n    const { userId } = req.user;\n    try {\n      const result = await Transactions.findAll({\n        where: { userId },\n        order: [\n          ['createdAt', 'DESC'],\n        ],\n      });\n      if (!result) {\n        return res.status(404).json({ status: 404, error: 'You currently have no transaction logs!' });\n      }\n      return res.status(200).json({ status: 200, message: 'Successful!', data: result });\n    } catch (error) {\n      return res.status(500).json({ status: 500, error: 'Oops, there\\'s an error!' });\n    }\n  }\n}\n"],"file":"user.js"}